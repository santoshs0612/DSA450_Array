Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
 

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
Example 2:

Input: N = 5
arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already 
sorted so there is no inversion count.
Example 3:

Input: N = 3, arr[] = {10, 10, 10}
Output: 0
Explanation: As all the elements of array 
are same, so there is no inversion count.











// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
  typedef long long int lli;
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    lli merge(long long arr[],long long low,long long mid, long long high)
    {
        int i,j,k;
        int n1 = mid-low+1;
        int n2 = high-mid;
        lli Left[n1],Right[n2];
        lli inv_count=0;
        for(int i=0;i<n1;i++)
        {
            Left[i]= arr[low+i];
        }
        for(int i=0;i<n2;i++)
        {
            Right[i]= arr[mid+1+i];
        }
        i=0,j=0,k=low;
        while(i<n1 && j<n2)
        {
            if(Left[i]<=Right[j])
            {
                arr[k++]=Left[i++];
            }
            else 
            {
                arr[k++]=Right[j++];
                inv_count+= n1-(lli)i;
            }
        }
        
        while(i<n1)
        {
            arr[k++]=Left[i++];
        }
        while(j<n2)
        {
            arr[k++]=Right[j++];
        }
        return inv_count;
    }
    lli megreSort(long long arr[],long long low,long long high)
    {
        lli inv_count=0;
        if(low<high)
        {
            lli mid= low+(high-low)/2;
            inv_count+=megreSort(arr,low,mid);
            inv_count+=megreSort(arr,mid+1,high);
            inv_count+=merge(arr,low,mid,high);
        }
        return inv_count;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        lli inv_count=0;
        lli low=0, high= N-1;
        
        inv_count=megreSort(arr,low,high);
        
        return inv_count;
    }

};

// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
  // } Driver Code Ends
