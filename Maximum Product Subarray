Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:

Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.


// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends
//User function template for C++
class Solution{
public:

	// Function to find maximum product subarray
	long long maxProduct(vector<int> arr, int n) {
	    // code here
	    typedef long long ll;
	    ll max_=arr[0];
	    ll min_=arr[0];
	    ll max_till_now=arr[0];
	    
	    for(int i=1;i<n;i++)
	    {
	       // if(arr[i]==0)
	       // {
	       //     min_=1;
	       //     max_=1;
	       // }
	        ll temp1= arr[i]*max_;
	        ll temp2= arr[i]*min_;
	        max_=max(temp2,temp1);
	        ll cur= arr[i];
	        max_=max(max_,cur);
	        min_=min(temp1,temp2);
	        min_=min(min_,cur);
	        max_till_now= max(max_till_now,max_);
	    }
	    return max_till_now;
	}
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        vector<int> arr(n);
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.maxProduct(arr, n);
        cout << ans << "\n";
    }
    return 0;
}  // } Driver Code Ends
