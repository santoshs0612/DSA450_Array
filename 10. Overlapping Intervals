Given a collection of Intervals, the task is to merge all of the overlapping Intervals.

Example 1:

Input:
Intervals = {{1,3},{2,4},{6,8},{9,10}}
Output: {{1, 4}, {6, 8}, {9, 10}}
Explanation: Given intervals: [1,3],[2,4]
[6,8],[9,10], we have only two overlapping
intervals here,[1,3] and [2,4]. Therefore
we will merge these two and return [1,4],
[6,8], [9,10].
Example 2:

Input:
Intervals = {{6,8},{1,9},{2,4},{4,7}}
Output: {{1, 9}}

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {
         // Code here
         sort(intervals.begin(),intervals.end());
        //  for(auto i:intervals)
        //  {
        //      for(auto j:i)
        //      {
        //          cout<<j<<" ";
        //      }
        //  }
         
        int row= intervals.size();
        int column=intervals[0].size();
        vector<vector<int>> ans;
        //cout<<row<<" "<< column;
        int start=INT_MAX;
        int end=INT_MIN;
        vector<int>temp;
        temp.push_back(intervals[0][0]);
        temp.push_back(intervals[0][1]);
        ans.push_back(temp);
        //temp.clear();
        int i=1;
        while(i<row)
        {
            if(temp[1]>=intervals[i][0])
            {
                //start=min(temp[0],intervals[i][0]);
                end= max(temp[1],intervals[i][1]);
                temp.clear();
                temp.push_back({temp[0]);
                temp.push_back(end);
                ans.pop_back();
                ans.push_back(temp);
                //temp.clear();
                temp=ans.back();
                i++;
            }
            else 
            {
                temp.clear();
                temp.push_back(intervals[i][0]);
                temp.push_back(intervals[i][1]);
                ans.push_back(temp);
                //temp.clear();
                //temp=ans.back();
                i++;
            }
        // int j=0;
        // for(int i=1;i<row;i++)
        // {
        //     if(ans[j][1]>intervals[i][0])
        //     {
        //         int temp_end= max(ans[j][1],intervals[i][1]);
        //         //temp.push_back(ans[j][1]);
        //         ans[j].push_back(ans[j][0]);
        //         ans[j].push_back(temp_end);
                
        //     }
        //     else 
        //     {
        //         j++;
        //         ans[j]=intervals[i];
        //     }
        // }
                
                
        // }
        // for erasing the repeating terms
        // for(int i=0 ;i<=ans.size();i++)
        // {
        //     if(ans[i]==ans[i+1])//ans[i][0]==ans[i+1][0] && ans[i][1]==ans[i+1][1] )
        //     {
        //         ans.erase(ans.begin()+i);
        //     }
        //     else{
        //         continue;
        //     }
         }
         return ans;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>Intervals(n);
		for(int i = 0; i < n; i++){
			int x, y;
			cin >> x >> y;
			Intervals[i].push_back(x);
			Intervals[i].push_back(y);
		}
		Solution obj;
		vector<vector<int>> ans = obj.overlappedInterval(Intervals);
		for(auto i: ans){
			for(auto j: i){
				cout << j << " ";
			}
		}
		cout << "\n";
	}
	return 0;
}  // } Driver Code Ends
