In daily share trading, a buyer buys shares in the morning and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, the second transaction can only start after the first one is complete (Buy->sell->Buy->sell). The stock prices throughout the day are represented in the form of an array of prices. 

Given an array price of size N, find out the maximum profit that a share trader could have made.

Example 1:

Input:
6
10 22 5 75 65 80
Output:
87
Explanation:
Trader earns 87 as sum of 12, 75 
Buy at 10, sell at 22, 
Buy at 5 and sell at 80
Example 2:

Input:
7
2 30 15 10 8 25 80
Output:
100
Explanation:

Trader earns 100 as sum of 28 and 72
Buy at price 2, sell at 30,
Buy at 8 and sell at 80




















int maxProfit(vector<int>&price){
    //Write your code here..
    //O(N)+O(N)
    int n=price.size();
    int left[n];
    int right[n];
    int left_min=price[0],right_max=price[n-1];
    left[0]=0;
    for(int i=1;i<n;i++)
    {
        left[i]=max(left[i-1],price[i]-left_min);
        left_min=min(left_min,price[i]);
    }
    right[n-1]=0;
    for(int i=n-2;i>=0;i--)
    {
        right[i]=max(right[i+1],right_max-price[i]);
        right_max=max(right_max,price[i]);
    }   
    int profit=right[0];
    for(int i=1;i<n;i++)
    {
        profit=max(profit,left[i-1]+right[i]);
    }
    return profit;
    
    
    // O(N)+O(1)
    // int wallet1=INT_MAX,wallet2=INT_MAX;
    // int profit1=0,profit2=0;
    // for(int i=0;i<price.size();i++)
    // {
    //     wallet1=min(wallet1,price[i]);
    //     profit1=max(profit1,price[i]-wallet1);
    //     wallet2=min(wallet2,price[i]-profit1);
    //     profit2=max(profit2,price[i]-wallet2);
    // }
    // return profit2;
    
}
