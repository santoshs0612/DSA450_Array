Given an array a[] of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array.

Input:
N = 4
a[] = {0,3,1,2}
Output: -1
Explanation: N=4 and all elements from 0
to (N-1 = 3) are present in the given
array. Therefore output is -1.

Input:
N = 5
a[] = {2,3,1,2,3}
Output: 2 3 
Explanation: 2 and 3 occur more than once
in the given array.


// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
        
    //     unordered_map<int, int> m;
    //     vector<int> v;
        
    //     for(int i=0;i<n;i++)
    //     {
    //         m[arr[i]]++;
    //     }
    //     for(auto i:m)
    //     {
    //         if(i.second>1) v.push_back(i.first);
    //     }
    //     if(v.empty())
    //     {
    //         v.push_back(-1); 
    //         return v;
    //     }
    //     else sort(v.begin(),v.end()); return v;
        
    // }
    
  ////// good techniqueue   
    vector<int> v;
    for(int i=0;i<n;i++)
    {
        int place= arr[i]%n;
        arr[place]+=n; 
    }
    for(int i=0;i<n;i++)
    {
        //cout<< arr[i]<<" ";
        if((arr[i]/n)>=2)
        {
            v.push_back(i);
        }
    }
    if(!v.empty())
    {
        
        return v;
    }
    else
    {
        v.push_back(-1);
        return v;
        
    }
    
    }
    
};


// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t-- > 0) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        Solution obj;
        vector<int> ans = obj.duplicates(a, n);
        for (int i : ans) cout << i << ' ';
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends
